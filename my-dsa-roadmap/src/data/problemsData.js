// add the problem
export const problemsData = {
  arrays: [
    { name: "1. Two Sum", difficulty: "Easy", description: "Find two numbers that add up to target using array indices.", nodeId: "arrays" },
    { name: "53. Maximum Subarray", difficulty: "Medium", description: "Find subarray with largest sum (Kadane's Algorithm).", nodeId: "arrays" },
    { name: "238. Product of Array Except Self", difficulty: "Medium", description: "Return array output[i] = product of all nums except nums[i].", nodeId: "arrays" },
    { name: "26. Remove Duplicates from Sorted Array", difficulty: "Easy", description: "Remove duplicates in-place and return new length.", nodeId: "arrays" },
    { name: "27. Remove Element", difficulty: "Easy", description: "Remove all instances of val in-place.", nodeId: "arrays" },
    { name: "88. Merge Sorted Array", difficulty: "Easy", description: "Merge two sorted arrays in-place.", nodeId: "arrays" },
    { name: "121. Best Time to Buy and Sell Stock", difficulty: "Easy", description: "Find max profit from buying and selling stock once.", nodeId: "arrays" },
    { name: "122. Best Time to Buy and Sell Stock II", difficulty: "Medium", description: "Find max profit with multiple transactions.", nodeId: "arrays" },
    { name: "169. Majority Element", difficulty: "Easy", description: "Find element appearing more than n/2 times.", nodeId: "arrays" },
    { name: "189. Rotate Array", difficulty: "Medium", description: "Rotate array to the right by k steps.", nodeId: "arrays" },
    { name: "283. Move Zeroes", difficulty: "Easy", description: "Move all zeroes to end while maintaining order.", nodeId: "arrays" },
    { name: "448. Find All Numbers Disappeared", difficulty: "Easy", description: "Find all numbers disappeared in array [1,n].", nodeId: "arrays" },
    { name: "485. Max Consecutive Ones", difficulty: "Easy", description: "Find max number of consecutive 1s.", nodeId: "arrays" },
    { name: "560. Subarray Sum Equals K", difficulty: "Medium", description: "Find total number of subarrays with sum k.", nodeId: "arrays" },
    { name: "724. Find Pivot Index", difficulty: "Easy", description: "Find index where left sum equals right sum.", nodeId: "arrays" }
  ],
  linkedlist: [
    { name: "141. Linked List Cycle", difficulty: "Easy", description: "Detect if a cycle exists using fast/slow pointers.", nodeId: "linkedlist" },
    { name: "206. Reverse Linked List", difficulty: "Easy", description: "Reverse a linked list iteratively or recursively.", nodeId: "linkedlist" },
    { name: "21. Merge Two Sorted Lists", difficulty: "Easy", description: "Merge two sorted linked lists into one.", nodeId: "linkedlist" },
    { name: "2. Add Two Numbers", difficulty: "Medium", description: "Add numbers represented as linked lists.", nodeId: "linkedlist" },
    { name: "19. Remove Nth Node From End", difficulty: "Medium", description: "Remove nth node from end using two pointers.", nodeId: "linkedlist" },
    { name: "83. Remove Duplicates from Sorted List", difficulty: "Easy", description: "Remove duplicates from sorted linked list.", nodeId: "linkedlist" },
    { name: "142. Linked List Cycle II", difficulty: "Medium", description: "Return node where cycle begins.", nodeId: "linkedlist" },
    { name: "160. Intersection of Two Linked Lists", difficulty: "Easy", description: "Find intersection node of two lists.", nodeId: "linkedlist" },
    { name: "203. Remove Linked List Elements", difficulty: "Easy", description: "Remove all nodes with given value.", nodeId: "linkedlist" },
    { name: "234. Palindrome Linked List", difficulty: "Easy", description: "Check if linked list is palindrome.", nodeId: "linkedlist" },
    { name: "237. Delete Node in a Linked List", difficulty: "Easy", description: "Delete node when only given node reference.", nodeId: "linkedlist" },
    { name: "328. Odd Even Linked List", difficulty: "Medium", description: "Group odd and even positioned nodes.", nodeId: "linkedlist" },
    { name: "876. Middle of the Linked List", difficulty: "Easy", description: "Find middle node using slow/fast pointers.", nodeId: "linkedlist" },
    { name: "92. Reverse Linked List II", difficulty: "Medium", description: "Reverse nodes from position m to n.", nodeId: "linkedlist" },
    { name: "148. Sort List", difficulty: "Medium", description: "Sort linked list using merge sort.", nodeId: "linkedlist" }
  ],
  hashing: [
    { name: "217. Contains Duplicate", difficulty: "Easy", description: "Check duplicates using HashSet.", nodeId: "hashing" },
    { name: "49. Group Anagrams", difficulty: "Medium", description: "Group words by character frequency map.", nodeId: "hashing" },
    { name: "128. Longest Consecutive Sequence", difficulty: "Medium", description: "Find longest sequence using HashSet.", nodeId: "hashing" },
    { name: "136. Single Number", difficulty: "Easy", description: "Find number that appears once using XOR.", nodeId: "hashing" },
    { name: "242. Valid Anagram", difficulty: "Easy", description: "Check if two strings are anagrams.", nodeId: "hashing" },
    { name: "349. Intersection of Two Arrays", difficulty: "Easy", description: "Find intersection using HashSet.", nodeId: "hashing" },
    { name: "350. Intersection of Two Arrays II", difficulty: "Easy", description: "Find intersection with duplicates using HashMap.", nodeId: "hashing" },
    { name: "389. Find the Difference", difficulty: "Easy", description: "Find extra character using XOR or HashMap.", nodeId: "hashing" },
    { name: "409. Longest Palindrome", difficulty: "Easy", description: "Find longest palindrome length from characters.", nodeId: "hashing" },
    { name: "454. 4Sum II", difficulty: "Medium", description: "Count tuples with sum zero using HashMap.", nodeId: "hashing" },
    { name: "599. Minimum Index Sum of Two Lists", difficulty: "Easy", description: "Find common strings with minimum index sum.", nodeId: "hashing" },
    { name: "692. Top K Frequent Words", difficulty: "Medium", description: "Find k most frequent words using HashMap.", nodeId: "hashing" },
    { name: "771. Jewels and Stones", difficulty: "Easy", description: "Count jewels using HashSet lookup.", nodeId: "hashing" },
    { name: "1207. Unique Number of Occurrences", difficulty: "Easy", description: "Check if all frequencies are unique.", nodeId: "hashing" },
    { name: "1512. Number of Good Pairs", difficulty: "Easy", description: "Count pairs with same values using HashMap.", nodeId: "hashing" }
  ],
  binary: [
    { name: "704. Binary Search", difficulty: "Easy", description: "Classic binary search on sorted array.", nodeId: "binary" },
    { name: "33. Search in Rotated Sorted Array", difficulty: "Medium", description: "Search target in rotated sorted array.", nodeId: "binary" },
    { name: "153. Find Minimum in Rotated Array", difficulty: "Medium", description: "Find min element in rotated sorted array.", nodeId: "binary" },
    { name: "35. Search Insert Position", difficulty: "Easy", description: "Find position to insert target in sorted array.", nodeId: "binary" },
    { name: "69. Sqrt(x)", difficulty: "Easy", description: "Find square root using binary search.", nodeId: "binary" },
    { name: "74. Search a 2D Matrix", difficulty: "Medium", description: "Search in row and column sorted matrix.", nodeId: "binary" },
    { name: "81. Search in Rotated Sorted Array II", difficulty: "Medium", description: "Search with duplicate elements.", nodeId: "binary" },
    { name: "154. Find Minimum in Rotated Array II", difficulty: "Hard", description: "Find min in rotated array with duplicates.", nodeId: "binary" },
    { name: "162. Find Peak Element", difficulty: "Medium", description: "Find peak element using binary search.", nodeId: "binary" },
    { name: "278. First Bad Version", difficulty: "Easy", description: "Find first bad version using binary search API.", nodeId: "binary" },
    { name: "374. Guess Number Higher or Lower", difficulty: "Easy", description: "Guess number game using binary search.", nodeId: "binary" },
    { name: "441. Arranging Coins", difficulty: "Easy", description: "Find complete rows using binary search.", nodeId: "binary" },
    { name: "852. Peak Index in a Mountain Array", difficulty: "Easy", description: "Find peak in mountain array.", nodeId: "binary" },
    { name: "875. Koko Eating Bananas", difficulty: "Medium", description: "Find minimum eating speed using binary search.", nodeId: "binary" },
    { name: "1539. Kth Missing Positive Number", difficulty: "Easy", description: "Find kth missing number using binary search.", nodeId: "binary" }
  ],
  twoptr: [
    { name: "125. Valid Palindrome", difficulty: "Easy", description: "Check if string is palindrome with two pointers.", nodeId: "twoptr" },
    { name: "15. 3Sum", difficulty: "Medium", description: "Find triplets with sum zero using sorting + 2-ptr.", nodeId: "twoptr" },
    { name: "11. Container With Most Water", difficulty: "Medium", description: "Max area formed between two lines.", nodeId: "twoptr" },
    { name: "167. Two Sum II - Input Array Is Sorted", difficulty: "Medium", description: "Find two numbers that sum to target in sorted array.", nodeId: "twoptr" },
    { name: "18. 4Sum", difficulty: "Medium", description: "Find quadruplets that sum to target.", nodeId: "twoptr" },
    { name: "42. Trapping Rain Water", difficulty: "Hard", description: "Calculate trapped rainwater using two pointers.", nodeId: "twoptr" },
    { name: "75. Sort Colors", difficulty: "Medium", description: "Dutch flag problem using three pointers.", nodeId: "twoptr" },
    { name: "80. Remove Duplicates from Sorted Array II", difficulty: "Medium", description: "Remove duplicates allowing at most two.", nodeId: "twoptr" },
    { name: "344. Reverse String", difficulty: "Easy", description: "Reverse string in-place using two pointers.", nodeId: "twoptr" },
    { name: "345. Reverse Vowels of a String", difficulty: "Easy", description: "Reverse only vowels using two pointers.", nodeId: "twoptr" },
    { name: "392. Is Subsequence", difficulty: "Easy", description: "Check if s is subsequence of t.", nodeId: "twoptr" },
    { name: "581. Shortest Unsorted Continuous Subarray", difficulty: "Medium", description: "Find shortest subarray to sort entire array.", nodeId: "twoptr" },
    { name: "977. Squares of a Sorted Array", difficulty: "Easy", description: "Return squares in sorted order using two pointers.", nodeId: "twoptr" },
    { name: "1679. Max Number of K-Sum Pairs", difficulty: "Medium", description: "Find max pairs with sum k using two pointers.", nodeId: "twoptr" },
    { name: "1768. Merge Strings Alternately", difficulty: "Easy", description: "Merge two strings alternately using two pointers.", nodeId: "twoptr" }
  ],
  sliding: [
    { name: "3. Longest Substring Without Repeating", difficulty: "Medium", description: "Track substring with hash + sliding window.", nodeId: "sliding" },
    { name: "76. Minimum Window Substring", difficulty: "Hard", description: "Smallest substring containing all chars.", nodeId: "sliding" },
    { name: "424. Longest Repeating Character Replacement", difficulty: "Medium", description: "Find longest substring with k replacements.", nodeId: "sliding" },
    { name: "209. Minimum Size Subarray Sum", difficulty: "Medium", description: "Find minimum length subarray with sum >= target.", nodeId: "sliding" },
    { name: "219. Contains Duplicate II", difficulty: "Easy", description: "Check duplicates within k distance using sliding window.", nodeId: "sliding" },
    { name: "239. Sliding Window Maximum", difficulty: "Hard", description: "Find maximum in each sliding window using deque.", nodeId: "sliding" },
    { name: "340. Longest Substring with At Most K Distinct", difficulty: "Medium", description: "Find longest substring with k distinct chars.", nodeId: "sliding" },
    { name: "438. Find All Anagrams in a String", difficulty: "Medium", description: "Find all anagram substrings using sliding window.", nodeId: "sliding" },
    { name: "567. Permutation in String", difficulty: "Medium", description: "Check if permutation of s1 exists in s2.", nodeId: "sliding" },
    { name: "643. Maximum Average Subarray I", difficulty: "Easy", description: "Find subarray of length k with max average.", nodeId: "sliding" },
    { name: "713. Subarray Product Less Than K", difficulty: "Medium", description: "Count subarrays with product less than k.", nodeId: "sliding" },
    { name: "1004. Max Consecutive Ones III", difficulty: "Medium", description: "Find max consecutive 1s after flipping k 0s.", nodeId: "sliding" },
    { name: "1208. Get Equal Substrings Within Budget", difficulty: "Medium", description: "Find longest substring within budget using sliding window.", nodeId: "sliding" },
    { name: "1456. Maximum Number of Vowels", difficulty: "Medium", description: "Find max vowels in substring of length k.", nodeId: "sliding" },
    { name: "1493. Longest Subarray of 1s After Deleting One Element", difficulty: "Medium", description: "Find longest subarray of 1s after deleting one 0.", nodeId: "sliding" }
  ],
  trees: [
    { name: "94. Binary Tree Inorder Traversal", difficulty: "Easy", description: "Recursive and iterative traversal.", nodeId: "trees" },
    { name: "104. Maximum Depth of Binary Tree", difficulty: "Easy", description: "Find height of tree with recursion.", nodeId: "trees" },
    { name: "236. Lowest Common Ancestor", difficulty: "Medium", description: "Return lowest common ancestor node.", nodeId: "trees" },
    { name: "100. Same Tree", difficulty: "Easy", description: "Check if two trees are identical.", nodeId: "trees" },
    { name: "101. Symmetric Tree", difficulty: "Easy", description: "Check if tree is mirror of itself.", nodeId: "trees" },
    { name: "110. Balanced Binary Tree", difficulty: "Easy", description: "Check if tree is height-balanced.", nodeId: "trees" },
    { name: "111. Minimum Depth of Binary Tree", difficulty: "Easy", description: "Find minimum depth from root to leaf.", nodeId: "trees" },
    { name: "112. Path Sum", difficulty: "Easy", description: "Check if path exists with given sum.", nodeId: "trees" },
    { name: "144. Binary Tree Preorder Traversal", difficulty: "Easy", description: "Preorder traversal iterative and recursive.", nodeId: "trees" },
    { name: "145. Binary Tree Postorder Traversal", difficulty: "Easy", description: "Postorder traversal iterative and recursive.", nodeId: "trees" },
    { name: "226. Invert Binary Tree", difficulty: "Easy", description: "Invert/flip binary tree recursively.", nodeId: "trees" },
    { name: "543. Diameter of Binary Tree", difficulty: "Easy", description: "Find diameter (longest path between nodes).", nodeId: "trees" },
    { name: "572. Subtree of Another Tree", difficulty: "Easy", description: "Check if subRoot is subtree of root.", nodeId: "trees" },
    { name: "617. Merge Two Binary Trees", difficulty: "Easy", description: "Merge two trees by adding overlapping nodes.", nodeId: "trees" },
    { name: "965. Univalued Binary Tree", difficulty: "Easy", description: "Check if all nodes have same value.", nodeId: "trees" }
  ],
  graphs: [
    { name: "133. Clone Graph", difficulty: "Medium", description: "Deep copy a graph using DFS/BFS.", nodeId: "graphs" },
    { name: "200. Number of Islands", difficulty: "Medium", description: "Count islands using DFS/BFS traversal.", nodeId: "graphs" },
    { name: "207. Course Schedule", difficulty: "Medium", description: "Detect cycle in graph with topological sort.", nodeId: "graphs" },
    { name: "210. Course Schedule II", difficulty: "Medium", description: "Return course order using topological sort.", nodeId: "graphs" },
    { name: "261. Graph Valid Tree", difficulty: "Medium", description: "Check if edges form a valid tree.", nodeId: "graphs" },
    { name: "323. Number of Connected Components", difficulty: "Medium", description: "Count connected components using DFS/Union-Find.", nodeId: "graphs" },
    { name: "399. Evaluate Division", difficulty: "Medium", description: "Graph with weighted edges for division queries.", nodeId: "graphs" },
    { name: "547. Number of Provinces", difficulty: "Medium", description: "Count provinces using DFS/Union-Find.", nodeId: "graphs" },
    { name: "684. Redundant Connection", difficulty: "Medium", description: "Find edge that creates cycle using Union-Find.", nodeId: "graphs" },
    { name: "695. Max Area of Island", difficulty: "Medium", description: "Find maximum island area using DFS.", nodeId: "graphs" },
    { name: "721. Accounts Merge", difficulty: "Medium", description: "Merge accounts with common emails using Union-Find.", nodeId: "graphs" },
    { name: "785. Is Graph Bipartite?", difficulty: "Medium", description: "Check if graph can be colored with 2 colors.", nodeId: "graphs" },
    { name: "997. Find the Town Judge", difficulty: "Easy", description: "Find node with in-degree n-1 and out-degree 0.", nodeId: "graphs" },
    { name: "1254. Number of Closed Islands", difficulty: "Medium", description: "Count islands not connected to border using DFS.", nodeId: "graphs" },
    { name: "1466. Reorder Routes", difficulty: "Medium", description: "Find minimum route changes using DFS.", nodeId: "graphs" }
  ],
  bfs: [
    { name: "102. Binary Tree Level Order Traversal", difficulty: "Medium", description: "BFS traversal level by level.", nodeId: "bfs" },
    { name: "279. Perfect Squares", difficulty: "Medium", description: "Min steps to reach n using BFS.", nodeId: "bfs" },
    { name: "127. Word Ladder", difficulty: "Hard", description: "Transform word with BFS shortest path.", nodeId: "bfs" },
    { name: "103. Binary Tree Zigzag Level Order", difficulty: "Medium", description: "Level order in zigzag pattern using BFS.", nodeId: "bfs" },
    { name: "107. Binary Tree Level Order Traversal II", difficulty: "Medium", description: "Level order from bottom to top using BFS.", nodeId: "bfs" },
    { name: "111. Minimum Depth of Binary Tree", difficulty: "Easy", description: "Find min depth using BFS early termination.", nodeId: "bfs" },
    { name: "126. Word Ladder II", difficulty: "Hard", description: "Find all shortest transformation sequences.", nodeId: "bfs" },
    { name: "130. Surrounded Regions", difficulty: "Medium", description: "Capture surrounded regions using BFS.", nodeId: "bfs" },
    { name: "199. Binary Tree Right Side View", difficulty: "Medium", description: "Return rightmost node at each level using BFS.", nodeId: "bfs" },
    { name: "286. Walls and Gates", difficulty: "Medium", description: "Fill distances to gates using multi-source BFS.", nodeId: "bfs" },
    { name: "322. Coin Change", difficulty: "Medium", description: "Min coins to make amount using BFS approach.", nodeId: "bfs" },
    { name: "429. N-ary Tree Level Order Traversal", difficulty: "Medium", description: "Level order traversal for N-ary tree.", nodeId: "bfs" },
    { name: "637. Average of Levels in Binary Tree", difficulty: "Easy", description: "Calculate average at each level using BFS.", nodeId: "bfs" },
    { name: "909. Snakes and Ladders", difficulty: "Medium", description: "Find minimum moves using BFS on board game.", nodeId: "bfs" },
    { name: "1162. As Far from Land as Possible", difficulty: "Medium", description: "Find max distance from land using multi-source BFS.", nodeId: "bfs" }
  ],
  dfs: [
    { name: "695. Max Area of Island", difficulty: "Medium", description: "DFS to explore max island size.", nodeId: "dfs" },
    { name: "200. Number of Islands", difficulty: "Medium", description: "DFS to count islands in grid.", nodeId: "dfs" },
    { name: "417. Pacific Atlantic Water Flow", difficulty: "Medium", description: "DFS to find reachable cells from oceans.", nodeId: "dfs" },
    { name: "98. Validate Binary Search Tree", difficulty: "Medium", description: "Validate BST using DFS with bounds.", nodeId: "dfs" },
    { name: "108. Convert Sorted Array to BST", difficulty: "Easy", description: "Build balanced BST using DFS recursion.", nodeId: "dfs" },
    { name: "113. Path Sum II", difficulty: "Medium", description: "Find all root-to-leaf paths with target sum.", nodeId: "dfs" },
    { name: "124. Binary Tree Maximum Path Sum", difficulty: "Hard", description: "Find maximum path sum using DFS.", nodeId: "dfs" },
    { name: "129. Sum Root to Leaf Numbers", difficulty: "Medium", description: "Sum all root-to-leaf numbers using DFS.", nodeId: "dfs" },
    { name: "130. Surrounded Regions", difficulty: "Medium", description: "Mark surrounded regions using DFS.", nodeId: "dfs" },
    { name: "200. Number of Islands", difficulty: "Medium", description: "Count connected components using DFS.", nodeId: "dfs" },
    { name: "257. Binary Tree Paths", difficulty: "Easy", description: "Find all root-to-leaf paths using DFS.", nodeId: "dfs" },
    { name: "329. Longest Increasing Path in Matrix", difficulty: "Hard", description: "Find longest increasing path using DFS + memoization.", nodeId: "dfs" },
    { name: "463. Island Perimeter", difficulty: "Easy", description: "Calculate island perimeter using DFS.", nodeId: "dfs" },
    { name: "543. Diameter of Binary Tree", difficulty: "Easy", description: "Find tree diameter using DFS.", nodeId: "dfs" },
    { name: "1020. Number of Enclaves", difficulty: "Medium", description: "Count enclaved land cells using DFS.", nodeId: "dfs" }
  ],
  matrix: [
    { name: "79. Word Search", difficulty: "Medium", description: "DFS in matrix to find word.", nodeId: "matrix" },
    { name: "48. Rotate Image", difficulty: "Medium", description: "Rotate N×N matrix in-place.", nodeId: "matrix" },
    { name: "73. Set Matrix Zeroes", difficulty: "Medium", description: "Set row/col to zero if element is zero.", nodeId: "matrix" },
    { name: "54. Spiral Matrix", difficulty: "Medium", description: "Return elements in spiral order.", nodeId: "matrix" },
    { name: "59. Spiral Matrix II", difficulty: "Medium", description: "Fill matrix in spiral order.", nodeId: "matrix" },
    { name: "36. Valid Sudoku", difficulty: "Medium", description: "Validate 9×9 Sudoku board.", nodeId: "matrix" },
    { name: "37. Sudoku Solver", difficulty: "Hard", description: "Solve Sudoku using backtracking.", nodeId: "matrix" },
    { name: "74. Search a 2D Matrix", difficulty: "Medium", description: "Search in sorted matrix.", nodeId: "matrix" },
    { name: "240. Search a 2D Matrix II", difficulty: "Medium", description: "Search in row and column sorted matrix.", nodeId: "matrix" },
    { name: "289. Game of Life", difficulty: "Medium", description: "Update board according to Game of Life rules.", nodeId: "matrix" },
    { name: "378. Kth Smallest Element in Sorted Matrix", difficulty: "Medium", description: "Find kth smallest in sorted matrix.", nodeId: "matrix" },
    { name: "766. Toeplitz Matrix", difficulty: "Easy", description: "Check if matrix is Toeplitz.", nodeId: "matrix" },
    { name: "867. Transpose Matrix", difficulty: "Easy", description: "Return transpose of matrix.", nodeId: "matrix" },
    { name: "1329. Sort the Matrix Diagonally", difficulty: "Medium", description: "Sort matrix diagonals independently.", nodeId: "matrix" },
    { name: "1572. Matrix Diagonal Sum", difficulty: "Easy", description: "Sum both diagonals of square matrix.", nodeId: "matrix" }
  ],
  backtracking: [
    { name: "46. Permutations", difficulty: "Medium", description: "Backtrack to generate all permutations.", nodeId: "backtracking" },
    { name: "51. N-Queens", difficulty: "Hard", description: "Place queens without attacking each other.", nodeId: "backtracking" },
    { name: "22. Generate Parentheses", difficulty: "Medium", description: "Backtrack valid parentheses strings.", nodeId: "backtracking" },
    { name: "17. Letter Combinations of Phone Number", difficulty: "Medium", description: "Generate letter combinations using backtracking.", nodeId: "backtracking" },
    { name: "39. Combination Sum", difficulty: "Medium", description: "Find combinations that sum to target.", nodeId: "backtracking" },
    { name: "40. Combination Sum II", difficulty: "Medium", description: "Find unique combinations with duplicates.", nodeId: "backtracking" },
    { name: "47. Permutations II", difficulty: "Medium", description: "Generate permutations with duplicates.", nodeId: "backtracking" },
    { name: "77. Combinations", difficulty: "Medium", description: "Generate all k-combinations.", nodeId: "backtracking" },
    { name: "78. Subsets", difficulty: "Medium", description: "Generate all possible subsets.", nodeId: "backtracking" },
    { name: "90. Subsets II", difficulty: "Medium", description: "Generate subsets with duplicates.", nodeId: "backtracking" },
    { name: "131. Palindrome Partitioning", difficulty: "Medium", description: "Partition string into palindromic substrings.", nodeId: "backtracking" },
    { name: "216. Combination Sum III", difficulty: "Medium", description: "Find k numbers that add up to n.", nodeId: "backtracking" },
    { name: "401. Binary Watch", difficulty: "Easy", description: "Generate possible times on binary watch.", nodeId: "backtracking" },
    { name: "784. Letter Case Permutation", difficulty: "Medium", description: "Generate permutations by changing letter case.", nodeId: "backtracking" },
    { name: "996. Number of Squareful Arrays", difficulty: "Hard", description: "Count arrays where adjacent elements sum to perfect square.", nodeId: "backtracking" }
  ],
  unionfind: [
    { name: "547. Number of Provinces", difficulty: "Medium", description: "Count connected components with DSU.", nodeId: "unionfind" },
    { name: "684. Redundant Connection", difficulty: "Medium", description: "Detect cycle with Union-Find.", nodeId: "unionfind" },
    { name: "721. Accounts Merge", difficulty: "Medium", description: "Merge accounts with common email.", nodeId: "unionfind" },
    { name: "128. Longest Consecutive Sequence", difficulty: "Medium", description: "Find longest sequence using Union-Find approach.", nodeId: "unionfind" },
    { name: "130. Surrounded Regions", difficulty: "Medium", description: "Mark surrounded regions using Union-Find.", nodeId: "unionfind" },
    { name: "200. Number of Islands", difficulty: "Medium", description: "Count islands using Union-Find.", nodeId: "unionfind" },
    { name: "261. Graph Valid Tree", difficulty: "Medium", description: "Validate tree using Union-Find.", nodeId: "unionfind" },
    { name: "323. Number of Connected Components", difficulty: "Medium", description: "Count components using Union-Find.", nodeId: "unionfind" },
    { name: "399. Evaluate Division", difficulty: "Medium", description: "Union-Find with weights for division.", nodeId: "unionfind" },
    { name: "685. Redundant Connection II", difficulty: "Hard", description: "Find redundant edge in directed graph.", nodeId: "unionfind" },
    { name: "765. Couples Holding Hands", difficulty: "Hard", description: "Min swaps using Union-Find.", nodeId: "unionfind" },
    { name: "803. Bricks Falling When Hit", difficulty: "Hard", description: "Reverse Union-Find simulation.", nodeId: "unionfind" },
    { name: "952. Largest Component Size by Common Factor", difficulty: "Hard", description: "Group numbers by common factors.", nodeId: "unionfind" },
    { name: "1202. Smallest String With Swaps", difficulty: "Medium", description: "Find smallest string using Union-Find.", nodeId: "unionfind" },
    { name: "1319. Number of Operations to Make Network Connected", difficulty: "Medium", description: "Check connectivity using Union-Find.", nodeId: "unionfind" }
  ],
  queue: [
    { name: "225. Implement Stack using Queues", difficulty: "Easy", description: "Simulate stack with two queues.", nodeId: "queue" },
    { name: "239. Sliding Window Maximum", difficulty: "Hard", description: "Use deque to find max in window.", nodeId: "queue" },
    { name: "933. Number of Recent Calls", difficulty: "Easy", description: "Track recent calls using queue.", nodeId: "queue" },
    { name: "232. Implement Queue using Stacks", difficulty: "Easy", description: "Simulate queue with two stacks.", nodeId: "queue" },
    { name: "346. Moving Average from Data Stream", difficulty: "Easy", description: "Calculate moving average using queue.", nodeId: "queue" },
    { name: "622. Design Circular Queue", difficulty: "Medium", description: "Implement circular queue with fixed size.", nodeId: "queue" },
    { name: "641. Design Circular Deque", difficulty: "Medium", description: "Implement circular double-ended queue.", nodeId: "queue" },
    { name: "649. Dota2 Senate", difficulty: "Medium", description: "Simulate voting using two queues.", nodeId: "queue" },
    { name: "862. Shortest Subarray with Sum at Least K", difficulty: "Hard", description: "Use deque for shortest subarray with sum >= K.", nodeId: "queue" },
    { name: "1438. Longest Continuous Subarray", difficulty: "Medium", description: "Use deque to maintain min/max in sliding window.", nodeId: "queue" },
    { name: "1499. Max Value of Equation", difficulty: "Hard", description: "Use deque to find max value efficiently.", nodeId: "queue" },
    { name: "1696. Jump Game VI", difficulty: "Medium", description: "Use deque for DP optimization.", nodeId: "queue" },
    { name: "1823. Find the Winner of Circular Game", difficulty: "Medium", description: "Josephus problem using queue simulation.", nodeId: "queue" },
    { name: "2073. Time Needed to Buy Tickets", difficulty: "Easy", description: "Simulate ticket buying using queue.", nodeId: "queue" }
  ],
  segment: [
    { name: "307. Range Sum Query - Mutable", difficulty: "Medium", description: "Segment Tree to update and query.", nodeId: "segment" },
    { name: "315. Count of Smaller Numbers After Self", difficulty: "Hard", description: "Use BIT/Segment Tree for counts.", nodeId: "segment" },
    { name: "218. The Skyline Problem", difficulty: "Hard", description: "Use segment tree for skyline queries.", nodeId: "segment" },
    { name: "327. Count of Range Sum", difficulty: "Hard", description: "Count range sums using segment tree.", nodeId: "segment" },
    { name: "493. Reverse Pairs", difficulty: "Hard", description: "Count reverse pairs using BIT/Segment Tree.", nodeId: "segment" },
    { name: "699. Falling Squares", difficulty: "Hard", description: "Track max heights using segment tree.", nodeId: "segment" },
    { name: "715. Range Module", difficulty: "Hard", description: "Track ranges using segment tree.", nodeId: "segment" },
    { name: "732. My Calendar III", difficulty: "Hard", description: "Count overlapping events using segment tree.", nodeId: "segment" },
    { name: "850. Rectangle Area II", difficulty: "Hard", description: "Calculate union area using coordinate compression.", nodeId: "segment" },
    { name: "1157. Online Majority Element", difficulty: "Hard", description: "Find majority in subarray using segment tree.", nodeId: "segment" }
  ],
  topo: [
    { name: "210. Course Schedule II", difficulty: "Medium", description: "Return course order using topo sort.", nodeId: "topo" },
    { name: "802. Find Eventual Safe States", difficulty: "Medium", description: "Detect safe nodes using topo sort.", nodeId: "topo" },
    { name: "207. Course Schedule", difficulty: "Medium", description: "Detect cycle using topological sort.", nodeId: "topo" },
    { name: "269. Alien Dictionary", difficulty: "Hard", description: "Find character order using topological sort.", nodeId: "topo" },
    { name: "310. Minimum Height Trees", difficulty: "Medium", description: "Find MHT roots using topological sort.", nodeId: "topo" },
    { name: "329. Longest Increasing Path in Matrix", difficulty: "Hard", description: "Use topological sort with DFS memoization.", nodeId: "topo" },
    { name: "444. Sequence Reconstruction", difficulty: "Medium", description: "Check unique topological order.", nodeId: "topo" },
    { name: "630. Course Schedule III", difficulty: "Hard", description: "Max courses using greedy + priority queue.", nodeId: "topo" },
    { name: "1136. Parallel Courses", difficulty: "Medium", description: "Min semesters using topological sort.", nodeId: "topo" },
    { name: "1203. Sort Items by Groups Respecting Dependencies", difficulty: "Hard", description: "Double topological sort for groups and items.", nodeId: "topo" },
    { name: "1462. Course Schedule IV", difficulty: "Medium", description: "Check prerequisite relationship.", nodeId: "topo" },
    { name: "2115. Find All Possible Recipes", difficulty: "Medium", description: "Find makeable recipes using topological sort.", nodeId: "topo" }
  ],
  geometry: [
    { name: "149. Max Points on a Line", difficulty: "Hard", description: "Find max points on straight line.", nodeId: "geometry" },
    { name: "587. Erect the Fence", difficulty: "Hard", description: "Convex hull problem.", nodeId: "geometry" },
    { name: "202. Happy Number", difficulty: "Easy", description: "Detect cycle in number transformation.", nodeId: "geometry" },
    { name: "223. Rectangle Area", difficulty: "Medium", description: "Calculate total area covered by rectangles.", nodeId: "geometry" },
    { name: "335. Self Crossing", difficulty: "Hard", description: "Determine if path crosses itself.", nodeId: "geometry" },
    { name: "356. Line Reflection", difficulty: "Medium", description: "Check if points reflect across vertical line.", nodeId: "geometry" },
    { name: "391. Perfect Rectangle", difficulty: "Hard", description: "Check if rectangles form perfect rectangle.", nodeId: "geometry" },
    { name: "469. Convex Polygon", difficulty: "Medium", description: "Check if points form convex polygon.", nodeId: "geometry" },
    { name: "593. Valid Square", difficulty: "Medium", description: "Check if 4 points form a square.", nodeId: "geometry" },
    { name: "812. Largest Triangle Area", difficulty: "Easy", description: "Find largest triangle area from points.", nodeId: "geometry" },
    { name: "836. Rectangle Overlap", difficulty: "Easy", description: "Check if two rectangles overlap.", nodeId: "geometry" },
    { name: "883. Projection Area of 3D Shapes", difficulty: "Easy", description: "Calculate projection areas.", nodeId: "geometry" },
    { name: "892. Surface Area of 3D Shapes", difficulty: "Easy", description: "Calculate surface area of 3D grid.", nodeId: "geometry" },
    { name: "963. Minimum Area Rectangle II", difficulty: "Medium", description: "Find min area rectangle from points.", nodeId: "geometry" }
  ],
  bit: [
    { name: "191. Number of 1 Bits", difficulty: "Easy", description: "Count set bits with bit tricks.", nodeId: "bit" },
    { name: "338. Counting Bits", difficulty: "Easy", description: "DP + bit manipulation.", nodeId: "bit" },
    { name: "190. Reverse Bits", difficulty: "Easy", description: "Reverse 32-bit unsigned integer.", nodeId: "bit" },
    { name: "136. Single Number", difficulty: "Easy", description: "Find single number using XOR.", nodeId: "bit" },
    { name: "137. Single Number II", difficulty: "Medium", description: "Find single number appearing once among triples.", nodeId: "bit" },
    { name: "231. Power of Two", difficulty: "Easy", description: "Check if number is power of 2.", nodeId: "bit" },
    { name: "268. Missing Number", difficulty: "Easy", description: "Find missing number using XOR.", nodeId: "bit" },
    { name: "371. Sum of Two Integers", difficulty: "Medium", description: "Add numbers without + operator.", nodeId: "bit" },
    { name: "389. Find the Difference", difficulty: "Easy", description: "Find extra character using XOR.", nodeId: "bit" },
    { name: "393. UTF-8 Validation", difficulty: "Medium", description: "Validate UTF-8 encoding using bit manipulation.", nodeId: "bit" },
    { name: "421. Maximum XOR of Two Numbers", difficulty: "Medium", description: "Find max XOR using trie or bit manipulation.", nodeId: "bit" },
    { name: "461. Hamming Distance", difficulty: "Easy", description: "Count differing bits between two numbers.", nodeId: "bit" },
    { name: "476. Number Complement", difficulty: "Easy", description: "Find complement by flipping bits.", nodeId: "bit" },
    { name: "693. Binary Number with Alternating Bits", difficulty: "Easy", description: "Check if bits alternate using bit operations.", nodeId: "bit" },
    { name: "898. Bitwise ORs of Subarrays", difficulty: "Medium", description: "Find all possible OR values of subarrays.", nodeId: "bit" }
  ],
  prefix: [
    { name: "303. Range Sum Query - Immutable", difficulty: "Easy", description: "Prefix sums for range queries.", nodeId: "prefix" },
    { name: "560. Subarray Sum Equals K", difficulty: "Medium", description: "Use prefix sums + hashmap.", nodeId: "prefix" },
    { name: "304. Range Sum Query 2D - Immutable", difficulty: "Medium", description: "2D prefix sums for rectangle queries.", nodeId: "prefix" },
    { name: "238. Product of Array Except Self", difficulty: "Medium", description: "Use prefix/suffix products.", nodeId: "prefix" },
    { name: "325. Maximum Size Subarray Sum Equals K", difficulty: "Medium", description: "Find longest subarray with sum k.", nodeId: "prefix" },
    { name: "437. Path Sum III", difficulty: "Medium", description: "Count paths with sum using prefix sums.", nodeId: "prefix" },
    { name: "523. Continuous Subarray Sum", difficulty: "Medium", description: "Check subarray sum multiple of k.", nodeId: "prefix" },
    { name: "525. Contiguous Array", difficulty: "Medium", description: "Find max length with equal 0s and 1s.", nodeId: "prefix" },
    { name: "724. Find Pivot Index", difficulty: "Easy", description: "Find pivot using prefix sums.", nodeId: "prefix" },
    { name: "930. Binary Subarrays With Sum", difficulty: "Medium", description: "Count subarrays with target sum.", nodeId: "prefix" },
    { name: "974. Subarray Sums Divisible by K", difficulty: "Medium", description: "Count subarrays divisible by K.", nodeId: "prefix" },
    { name: "1074. Number of Submatrices That Sum to Target", difficulty: "Hard", description: "Count submatrices with target sum.", nodeId: "prefix" },
    { name: "1248. Count Number of Nice Subarrays", difficulty: "Medium", description: "Count subarrays with k odd numbers.", nodeId: "prefix" },
    { name: "1314. Matrix Block Sum", difficulty: "Medium", description: "Calculate block sums using 2D prefix.", nodeId: "prefix" },
    { name: "1546. Maximum Number of Non-Overlapping Subarrays", difficulty: "Medium", description: "Find max non-overlapping subarrays with sum.", nodeId: "prefix" }
  ],
  greedy: [
    { name: "55. Jump Game", difficulty: "Medium", description: "Greedy check if end is reachable.", nodeId: "greedy" },
    { name: "45. Jump Game II", difficulty: "Medium", description: "Greedy min jumps to reach end.", nodeId: "greedy" },
    { name: "435. Non-overlapping Intervals", difficulty: "Medium", description: "Remove intervals to avoid overlap.", nodeId: "greedy" },
    { name: "121. Best Time to Buy and Sell Stock", difficulty: "Easy", description: "Find max profit with one transaction.", nodeId: "greedy" },
    { name: "122. Best Time to Buy and Sell Stock II", difficulty: "Medium", description: "Max profit with multiple transactions.", nodeId: "greedy" },
    { name: "134. Gas Station", difficulty: "Medium", description: "Find starting gas station using greedy.", nodeId: "greedy" },
    { name: "179. Largest Number", difficulty: "Medium", description: "Arrange numbers to form largest number.", nodeId: "greedy" },
    { name: "253. Meeting Rooms II", difficulty: "Medium", description: "Min meeting rooms using greedy sorting.", nodeId: "greedy" },
    { name: "376. Wiggle Subsequence", difficulty: "Medium", description: "Find longest wiggle subsequence.", nodeId: "greedy" },
    { name: "406. Queue Reconstruction by Height", difficulty: "Medium", description: "Reconstruct queue using greedy approach.", nodeId: "greedy" },
    { name: "452. Minimum Number of Arrows", difficulty: "Medium", description: "Min arrows to burst balloons.", nodeId: "greedy" },
    { name: "621. Task Scheduler", difficulty: "Medium", description: "Schedule tasks with cooling time.", nodeId: "greedy" },
    { name: "763. Partition Labels", difficulty: "Medium", description: "Partition string into max parts.", nodeId: "greedy" },
    { name: "846. Hand of Straights", difficulty: "Medium", description: "Group cards into consecutive groups.", nodeId: "greedy" },
    { name: "1024. Video Stitching", difficulty: "Medium", description: "Min clips to cover entire time using greedy.", nodeId: "greedy" }
  ],
  trie: [
    { name: "208. Implement Trie", difficulty: "Medium", description: "Design Trie (insert, search, startsWith).", nodeId: "trie" },
    { name: "211. Add and Search Word", difficulty: "Medium", description: "Support '.' wildcard in Trie.", nodeId: "trie" },
    { name: "212. Word Search II", difficulty: "Hard", description: "Use Trie + DFS for multiple word search.", nodeId: "trie" },
    { name: "14. Longest Common Prefix", difficulty: "Easy", description: "Find common prefix using Trie approach.", nodeId: "trie" },
    { name: "139. Word Break", difficulty: "Medium", description: "Check word break using Trie + DP.", nodeId: "trie" },
    { name: "140. Word Break II", difficulty: "Hard", description: "Return all possible word breaks using Trie.", nodeId: "trie" },
    { name: "336. Palindrome Pairs", difficulty: "Hard", description: "Find palindrome pairs using Trie.", nodeId: "trie" },
    { name: "421. Maximum XOR of Two Numbers", difficulty: "Medium", description: "Find max XOR using binary Trie.", nodeId: "trie" },
    { name: "588. Design In-Memory File System", difficulty: "Hard", description: "Implement file system using Trie.", nodeId: "trie" },
    { name: "642. Design Search Autocomplete System", difficulty: "Hard", description: "Autocomplete using Trie with frequency.", nodeId: "trie" },
    { name: "648. Replace Words", difficulty: "Medium", description: "Replace words with roots using Trie.", nodeId: "trie" },
    { name: "676. Implement Magic Dictionary", difficulty: "Medium", description: "Dictionary with one character difference.", nodeId: "trie" },
    { name: "677. Map Sum Pairs", difficulty: "Medium", description: "Sum values with given prefix using Trie.", nodeId: "trie" },
    { name: "720. Longest Word in Dictionary", difficulty: "Easy", description: "Find longest word built from others using Trie.", nodeId: "trie" },
    { name: "1268. Search Suggestions System", difficulty: "Medium", description: "Product suggestions using Trie.", nodeId: "trie" }
  ]
};

// Convert to array for backend
export const flattenedProblemsData = Object.entries(problemsData).flatMap(([nodeId, problems]) =>
  problems.map(problem => ({
    ...problem,
    nodeId
  }))
);